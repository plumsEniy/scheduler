<!-- 级别从高到低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 -->
<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->
<!-- scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <shutdownHook class="ch.qos.logback.core.hook.DelayingShutdownHook"/>

    <!-- 设置日志记录名字 -->
    <contextName>dts-transfer-data-service</contextName>

    <!-- 动态日志级别 -->
    <jmxConfigurator />

    <!-- 日志最大的历史 5天 -->
    <property name="maxHistory" value="5" />
    <property name="log_dir" value="/data/log/bmr-cluster-scheduler"/>
<!--    <property name="log_dir" value="./log"/>-->
    <property name="APP_NAME" value="bmr-cluster-scheduler" />

    <!-- ConsoleAppender 控制台输出日志 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>
                <!-- 设置日志输出格式 -->
<!--                %d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger - %msg%n-->
                %d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [${APP_NAME}] [%thread] [%X{traceId}] %logger{60} - [%class : %method : %line] - %msg%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>


    </appender>

    <!-- ERROR级别日志 -->
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender -->
    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <file>${log_dir}/error.log</file>

        <!-- 过滤器，只记录WARN级别的日志 -->
        <!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置过滤级别 -->
            <level>ERROR</level>
            <!-- 用于配置符合过滤条件的操作 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 用于配置不符合过滤条件的操作 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--转换后的日志名-->
            <fileNamePattern>${log_dir}/error.log.%d{yyyy-MM-dd}.%i
            </fileNamePattern>
            <!--最多保存30天-->
            <maxFileSize>256MB</maxFileSize>
            <maxHistory>${maxHistory}</maxHistory>
            <totalSizeCap>512MB</totalSizeCap>
        </rollingPolicy>
        <encoder charset="UTF-8">
            <pattern>
                <!-- 设置日志输出格式 -->
                %d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [${APP_NAME}] [%thread] [%X{traceId}] %logger{60} - [%class : %method : %line] - %msg%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- WARN级别日志 appender -->
    <appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <file>${log_dir}/warn.log</file>
        <!-- 过滤器，只记录WARN级别的日志 -->
        <!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置过滤级别 -->
            <level>WARN</level>
            <!-- 用于配置符合过滤条件的操作 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 用于配置不符合过滤条件的操作 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--转换后的日志名-->
            <fileNamePattern>${log_dir}/warn.log.%d{yyyy-MM-dd}.%i
            </fileNamePattern>
            <!--最多保存30天-->
            <maxFileSize>256MB</maxFileSize>
            <maxHistory>${maxHistory}</maxHistory>
            <totalSizeCap>512MB</totalSizeCap>
        </rollingPolicy>
        <encoder charset="UTF-8">
            <pattern>
                <!-- 设置日志输出格式 -->
                %d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [${APP_NAME}] [%thread] [%X{traceId}] %logger{60} - [%class : %method : %line] - %msg%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- INFO级别日志 appender -->
    <appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <file>${log_dir}/info.log</file>

        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--转换后的日志名-->
            <fileNamePattern>${log_dir}/info.log.%d{yyyy-MM-dd}.%i
            </fileNamePattern>
            <!--最多保存30天-->
            <maxFileSize>256MB</maxFileSize>
            <maxHistory>${maxHistory}</maxHistory>
            <totalSizeCap>512MB</totalSizeCap>
        </rollingPolicy>
        <encoder charset="UTF-8">
            <pattern>
                <!-- 设置日志输出格式 -->
                %d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [${APP_NAME}] [%thread] [%X{traceId}] %logger{60} - [%class : %method : %line] - %msg%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- DEBUG级别日志 appender -->
    <appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <file>${log_dir}/debug.log</file>

        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--转换后的日志名-->
            <fileNamePattern>${log_dir}/debug.log.%d{yyyy-MM-dd}
            </fileNamePattern>
            <!--最多保存30天-->
            <maxHistory>${maxHistory}</maxHistory>
            <totalSizeCap>256MB</totalSizeCap>
        </rollingPolicy>
        <encoder charset="UTF-8">
            <pattern>
                <!-- 设置日志输出格式 -->
                %d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [${APP_NAME}] [%thread] [%X{traceId}] %logger{60} - [%class : %method : %line] - %msg%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- TRACE级别日志 appender -->
    <appender name="TRACE" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <file>${log_dir}/trace.log</file>

        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>TRACE</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--转换后的日志名-->
            <fileNamePattern>${log_dir}/trace.log.%d{yyyy-MM-dd}
            </fileNamePattern>
            <!--最多保存30天-->
            <maxHistory>${maxHistory}</maxHistory>
            <totalSizeCap>256MB</totalSizeCap>
        </rollingPolicy>
        <encoder charset="UTF-8">
            <pattern>
                <!-- 设置日志输出格式 -->
                %d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [${APP_NAME}] [%thread] [%X{traceId}] %logger{60} - [%class : %method : %line] - %msg%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- ALL日志 appender -->
    <appender name="ALL" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <file>${log_dir}/all.log</file>

        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ALL</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--转换后的日志名-->
            <fileNamePattern>${log_dir}/all.log.%d{yyyy-MM-dd}.%i
            </fileNamePattern>
            <!--最多保存30天-->
            <maxFileSize>256MB</maxFileSize>
            <maxHistory>${maxHistory}</maxHistory>
            <totalSizeCap>512MB</totalSizeCap>
        </rollingPolicy>
        <encoder charset="UTF-8">
            <pattern>
                <!-- 设置日志输出格式 -->
                %d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [${APP_NAME}] [%thread] [%X{traceId}] %logger{60} - [%class : %method : %line] - %msg%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>


    <logger name="pleiades.component.http.server.interceptor.HttpServerStats" level="WARN" />
    <logger name="pleiades.component.http.client.BiliHttpClient" level="WARN" />

    <root>
        <!-- 打印INFO级别日志及以上级别日志 -->
        <level value="INFO"/>
        <!-- 控制台输出 -->
        <appender-ref ref="CONSOLE"/>
        <!-- 文件输出 -->
        <appender-ref ref="ALL"/>
        <appender-ref ref="ERROR"/>
        <appender-ref ref="INFO"/>
        <appender-ref ref="WARN"/>
        <appender-ref ref="DEBUG"/>
        <appender-ref ref="TRACE"/>
    </root>
</configuration>
